{"version":3,"sources":["images/hand 1.png","components/ScoreBoard.js","components/EndGameWindow.js","components/GameBoard.js","components/StartGameWindow.js","App.js","index.js"],"names":["ScoreBoard","gameScoreId","isMobileScoreBoardOpen","isGameMode","newdata","data","map","i","className","price","style","color","id","reverse","EndGameWindow","setShowBoard","finallyPrice","src","hand","alt","onClick","initialGameState","currentQuestionId","correctAnswer","isSuccessAlertVisible","isErrorAlertVisible","correctButtonIndex","answeredButtonIndex","GameBoard","state","handleAnswer","answer","answerButtonIndex","answers","forEach","a","setState","setTimeout","questions","question","item","type","bind","disabled","isMobile","window","screen","width","this","props","Component","StartGameWindow","useState","showBoard","App","ReactDOM","render","document","getElementById"],"mappings":"09OAAe,MAA0B,mC,sDCiB1BA,EAZI,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,uBAAwBC,EAAgB,EAAhBA,WAChDC,EAAUC,EAAKC,KAAI,SAACD,EAAME,GAAP,OACrB,qBAAmBC,UAAW,aAAcC,MAASJ,EAAKI,MAAOC,MAAO,CAACC,MAAQV,IAAgBM,EAAK,SAAW,SAAjH,SAA4HF,EAAKI,OAAvHJ,EAAKO,OACfC,UACJ,OACKV,EACL,qBAAKK,UAAYN,EAAgD,QAAvB,qBAA1C,SACKE,IACI,qBAAKI,UAAU,YCSbM,EAjBO,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAMlC,OACQ,sBAAKR,UAAU,kBAAf,UACI,qBAAKA,UAAU,WAAf,SAA0B,qBAAKS,IAAKC,EAAMC,IAAI,WAC9C,sBAAKX,UAAU,aAAf,UACI,+BAAI,sBAAMA,UAAU,cAAhB,0BAAiD,uBAArD,IAA4DQ,EAA5D,aACA,wBAAQR,UAAU,aAAaY,QATvB,WACnBL,GAAa,IAQF,8BCTdM,EAAoB,CACtBC,kBAAmB,EACnBC,cAAe,KACfC,uBAAuB,EACvBC,qBAAqB,EACrBtB,YAAY,EACZD,wBAAwB,EACxBwB,mBAAoB,KACpBC,oBAAqB,MAGZC,EAAb,4MACIC,MADJ,eACgBR,GADhB,EAGIS,aAAe,SAACC,EAAQC,GACpB,IAAIN,EAAqB,EACzBrB,EAAK,EAAKwB,MAAMP,mBAAmBW,QAAQC,SAAQ,SAACC,EAAG5B,GACjD4B,IAAO9B,EAAK,EAAKwB,MAAMP,mBAAmBC,gBACzCG,EAAqBnB,MAG5B,EAAK6B,SAAS,CACVT,oBAAqBK,EACrBN,uBAGAK,IAAW1B,EAAK,EAAKwB,MAAMP,mBAAmBC,eAC9C,EAAKa,SAAS,CACVZ,uBAAuB,IAE3Ba,YAAW,WACP,EAAKD,SAAS,CACVd,kBAAmB,EAAKO,MAAMP,kBAAoB,EAClDE,uBAAuB,MAE5B,OAEH,EAAKY,SAAS,CACVX,qBAAqB,IAEzBY,YAAW,WACP,EAAKD,SAAS,CACVX,qBAAqB,EACrBtB,YAAY,MAEjB,OAlCf,uDAsCc,IAAD,OACCmC,EAAYjC,EAAKC,KAAI,SAACD,GAAD,OACvB,8BACKA,EAAKkC,UADAlC,EAAKO,OAKbqB,EAAU5B,EAAKC,KAAI,SAACkC,GAAD,OACrBA,EAAKP,QAAQ3B,KAAI,SAACyB,EAAQxB,GAAT,OACb,wBAEIkC,KAAK,SACLrB,QAAS,EAAKU,aAAaY,KAAK,EAAMX,EAAQxB,GAC9CoC,SAAW,EAAKd,MAAMJ,qBAAuB,EAAKI,MAAML,sBACxDhB,YAAa,EAAKqB,MAAML,wBAAyB,EAAKK,MAAMJ,qBAAyBlB,IAAM,EAAKsB,MAAMF,qBAAuBpB,IAAM,EAAKsB,MAAMH,mBAA6I,GAArHnB,IAAM,EAAKsB,MAAMF,qBAAuBpB,IAAM,EAAKsB,MAAMH,mBAAsB,eAAiB,kBAA2B,oBALrS,SAOKK,GANIxB,SAWXqC,EAAWC,OAAOC,OAAOC,MAAQ,IAChChC,EAAgBiC,KAAKC,MAArBlC,aACAb,EAA0B8C,KAAKnB,MAA/B3B,uBAEP,OACI,eAAC,WAAD,WACKA,EACK,wBAAQM,UAAU,sBAAsBY,QAAS,kBAAM,EAAKgB,SAAS,CAAClC,wBAAyB,EAAK2B,MAAM3B,4BAC1G,wBAAQM,UAAU,qBAAqBY,QAAS,kBAAM,EAAKgB,SAAS,CAAClC,wBAAyB,EAAK2B,MAAM3B,4BAG9G0C,EACI1C,EACK,cAAC,EAAD,CAAYA,uBAAwBA,EAAwBC,WAAY6C,KAAKnB,MAAM1B,aACnF,qBAAKK,UAAU,YAAf,SACGwC,KAAKnB,MAAM1B,WACR,sBAAKK,UAAU,mBAAf,UACI,qBAAKA,UAAU,wBAAf,SACK8B,EAAUU,KAAKnB,MAAMP,qBAE1B,qBAAKd,UAAU,gBAAf,SACKyB,EAAQe,KAAKnB,MAAMP,wBAInB,qBAAKd,UAAU,WAAf,SACT,cAAC,EAAD,CACIP,YAAa+C,KAAKnB,MAAMP,kBACxBP,aAAcA,EACdC,aAAcX,EAAK2C,KAAKnB,MAAMP,mBAAmBb,YAKhE,sBAAKD,UAAU,YAAf,UACG,cAAC,EAAD,CAAYP,YAAa+C,KAAKnB,MAAMP,kBAAmBnB,WAAY6C,KAAKnB,MAAM1B,aAC7E6C,KAAKnB,MAAM1B,WACR,sBAAKK,UAAU,mBAAf,UACI,qBAAKA,UAAU,wBAAf,SACK8B,EAAUU,KAAKnB,MAAMP,qBAE1B,qBAAKd,UAAU,gBAAf,SACKyB,EAAQe,KAAKnB,MAAMP,wBAInB,qBAAKd,UAAU,WAAf,SACL,cAAC,EAAD,CACIP,YAAa+C,KAAKnB,MAAMP,kBACxBP,aAAcA,EACdC,aAAcX,EAAK2C,KAAKnB,MAAMP,mBAAmBb,oBA7GrF,GAA+ByC,aCbxB,SAASC,IAAmB,IAAD,EACIC,oBAAS,GADb,mBACvBC,EADuB,KACZtC,EADY,KAO9B,OACI,cAAC,WAAD,WACoB,IAAdsC,EACC,sBAAK7C,UAAU,OAAf,UACK,qBAAKA,UAAU,WAAf,SAA0B,qBAAKS,IAAKC,EAAMC,IAAI,WAC9C,sBAAKX,UAAU,aAAf,UACI,iDAAmB,uBAAnB,qBACA,wBAAQA,UAAU,aAAaY,QAXnD,WACGL,GAAa,IAUI,yBAGV,cAAC,EAAD,CACKA,aAAcA,MClB1B,IAAMuC,EAAM,kBACf,qBAAK9C,UAAU,MAAf,SACI,cAAC2C,EAAD,OCCRI,IAASC,OACL,cAAC,IAAD,UACI,cAAC,EAAD,MAENC,SAASC,eAAe,W","file":"static/js/main.41b1319b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hand 1.db4d6f4e.png\";","import React from \"react\";\r\n\r\nimport data from \"../config\"\r\n\r\n\r\nconst ScoreBoard = ({gameScoreId, isMobileScoreBoardOpen, isGameMode}) => {\r\n    const newdata = data.map((data, i) => (\r\n        <div key={data.id} className={\"price-data\"} price = {data.price} style={{color: (gameScoreId === i) ? \"Orange\" : \"black\"}}>{data.price}</div>\r\n     )).reverse();\r\n    return (\r\n        (isGameMode) ?\r\n    <div className={!isMobileScoreBoardOpen ? \"mobile-score-board\" : \"score\"}>\r\n        {newdata}\r\n    </div> : <div className=\"absent\" />\r\n    )\r\n};\r\n\r\nexport default ScoreBoard;\r\n","import React from \"react\";\r\n\r\nimport hand from \"../images/hand 1.png\";\r\n\r\n\r\nconst EndGameWindow = ({setShowBoard, finallyPrice}) => {\r\n\r\n     const endGameHandler = () =>  {\r\n         setShowBoard(false);\r\n        };\r\n\r\n    return (\r\n            <div className=\"end-window-main\">\r\n                <div className=\"img-hand\"><img src={hand} alt=\"hand\" /></div>\r\n                <div className=\"right-side\">\r\n                    <h2><span className=\"total-score\">Total score:</span><br/> {finallyPrice} earned</h2>\r\n                    <button className=\"start-game\" onClick={endGameHandler}>Try again</button>\r\n                </div>\r\n            </div>\r\n    )\r\n};\r\n\r\nexport default EndGameWindow;","import React, {Fragment}  from \"react\";\r\nimport {Component} from \"react/cjs/react.production.min\";\r\n\r\nimport data from \"../config\";\r\nimport ScoreBoard from \"./ScoreBoard\";\r\nimport EndGameWindow from \"./EndGameWindow\"\r\n\r\nconst initialGameState =  {\r\n    currentQuestionId: 0,\r\n    correctAnswer: null,\r\n    isSuccessAlertVisible: false,\r\n    isErrorAlertVisible: false,\r\n    isGameMode: true,\r\n    isMobileScoreBoardOpen: false,\r\n    correctButtonIndex: null,\r\n    answeredButtonIndex: null,\r\n};\r\n\r\nexport class GameBoard extends Component {\r\n    state = {...initialGameState};\r\n\r\n    handleAnswer = (answer, answerButtonIndex) => {\r\n        let correctButtonIndex = 0;\r\n        data[this.state.currentQuestionId].answers.forEach((a, i) => {\r\n           if(a ===  data[this.state.currentQuestionId].correctAnswer) {\r\n               correctButtonIndex = i\r\n           }\r\n        });\r\n        this.setState({\r\n            answeredButtonIndex: answerButtonIndex,\r\n            correctButtonIndex,\r\n        });\r\n\r\n        if (answer === data[this.state.currentQuestionId].correctAnswer) {\r\n            this.setState({\r\n                isSuccessAlertVisible: true,\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    currentQuestionId: this.state.currentQuestionId + 1,\r\n                    isSuccessAlertVisible: false,\r\n                })\r\n            }, 2000);\r\n        } else {\r\n            this.setState({\r\n                isErrorAlertVisible: true,\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    isErrorAlertVisible: false,\r\n                    isGameMode: false,\r\n                });\r\n            }, 2000);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const questions = data.map((data) => (\r\n            <div key={data.id}>\r\n                {data.question}\r\n            </div>\r\n        ));\r\n\r\n        const answers = data.map((item) => (\r\n            item.answers.map((answer, i) => (\r\n                <button\r\n                    key={i}\r\n                    type=\"submit\"\r\n                    onClick={this.handleAnswer.bind(this, answer, i)}\r\n                    disabled={(this.state.isErrorAlertVisible || this.state.isSuccessAlertVisible)}\r\n                    className={((this.state.isSuccessAlertVisible || this.state.isErrorAlertVisible) && (i === this.state.answeredButtonIndex || i === this.state.correctButtonIndex) ? ((i === this.state.answeredButtonIndex && i !== this.state.correctButtonIndex) ? \"wrong-answer\" : \"success-answer\" ) : \"\") + \" question-button \" }\r\n                >\r\n                    {answer}\r\n                </button>\r\n            ))\r\n        ));\r\n\r\n        const isMobile = window.screen.width < 420;\r\n        const {setShowBoard} = this.props;\r\n        const {isMobileScoreBoardOpen} = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                {isMobileScoreBoardOpen\r\n                    ? <button className=\"mobile-close-window\" onClick={() => this.setState({isMobileScoreBoardOpen: !this.state.isMobileScoreBoardOpen})} />\r\n                    : <button className=\"mobile-open-window\" onClick={() => this.setState({isMobileScoreBoardOpen: !this.state.isMobileScoreBoardOpen})} />\r\n                }\r\n                {/*<button className=\"mobile-open-window\" onClick={() => this.setState({isMobileScoreBoardOpen: !this.state.isMobileScoreBoardOpen})} />*/}\r\n                {isMobile ?\r\n                    (isMobileScoreBoardOpen\r\n                        ? <ScoreBoard isMobileScoreBoardOpen={isMobileScoreBoardOpen} isGameMode={this.state.isGameMode}/>\r\n                        : <div className=\"gameBoard\">\r\n                            {this.state.isGameMode ?\r\n                                <div className=\"gameBoardWrapper\">\r\n                                    <div className=\"question-block-button\">\r\n                                        {questions[this.state.currentQuestionId]}\r\n                                    </div>\r\n                                    <div className=\"answers-block\">\r\n                                        {answers[this.state.currentQuestionId]}\r\n                                    </div>\r\n                                    {/*{this.state.isSuccessAlertVisible && <div className=\"correctMessage\"></div>}\r\n                                    {this.state.isErrorAlertVisible && <div className=\"wrongMessage\">Wrong!</div>}*/}\r\n                                </div> : <div className=\"end-game\">\r\n                                <EndGameWindow\r\n                                    gameScoreId={this.state.currentQuestionId}\r\n                                    setShowBoard={setShowBoard}\r\n                                    finallyPrice={data[this.state.currentQuestionId].price}\r\n                                />\r\n                                </div>}\r\n                            </div>)\r\n                        :\r\n                    (<div className=\"gameBoard\">\r\n                        <ScoreBoard gameScoreId={this.state.currentQuestionId} isGameMode={this.state.isGameMode}/>\r\n                        {this.state.isGameMode ?\r\n                            <div className=\"gameBoardWrapper\">\r\n                                <div className=\"question-block-button\">\r\n                                    {questions[this.state.currentQuestionId]}\r\n                                </div>\r\n                                <div className=\"answers-block\">\r\n                                    {answers[this.state.currentQuestionId]}\r\n                                </div>\r\n                                {/*{this.state.isSuccessAlertVisible && <div className=\"correctMessage\">Correct!</div>}\r\n                                {this.state.isErrorAlertVisible && <div className=\"wrongMessage\">Wrong!</div>}*/}\r\n                            </div> : <div className=\"end-game\">\r\n                                <EndGameWindow\r\n                                    gameScoreId={this.state.currentQuestionId}\r\n                                    setShowBoard={setShowBoard}\r\n                                    finallyPrice={data[this.state.currentQuestionId].price}\r\n                                />\r\n                            </div>}\r\n                    </div>)\r\n                    }\r\n            </Fragment>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, {Fragment, useState} from \"react\";\r\n\r\nimport hand from \"../images/hand 1.png\";\r\nimport {GameBoard} from \"./GameBoard\";\r\n\r\nexport function StartGameWindow() {\r\n    const [showBoard, setShowBoard] = useState(false);\r\n\r\n    function startGameHandler () {\r\n       setShowBoard(true);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n           { (showBoard === false)\r\n           ?   <div className=\"main\">\r\n                    <div className=\"img-hand\"><img src={hand} alt=\"hand\" /></div>\r\n                    <div className=\"right-side\">\r\n                        <h1>Who wants to be<br/> a millionaire?</h1>\r\n                        <button className=\"start-game\" onClick={startGameHandler}>Start</button>\r\n                    </div>\r\n                </div>\r\n           :  <GameBoard\r\n                   setShowBoard={setShowBoard}\r\n               />\r\n           }\r\n        </Fragment>\r\n        )\r\n}","import React from \"react\";\n\nimport {StartGameWindow} from \"./components/StartGameWindow\";\n\n\nexport const App = () => (\n    <div className=\"App\">\n        <StartGameWindow />\n    </div>\n);\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport \"./index.css\"\nimport {App} from './App';\n\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n),document.getElementById('root'));\n"],"sourceRoot":""}